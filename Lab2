%%cu
#include <stdlib.h>
#include <stdio.h>
#include <ctime>
#include <math.h>

__global__ void LogArray(double *a, double *res, int *n){
    int idx = threadIdx.x + blockIdx.x * blockDim.x;
    if(idx < *n){
        res[idx] = logf(a[idx]);
    }
}

double LogFact(double x){
    if (x == 0){
        return 0;
    }
    else if (x > 0){
        double res = 0;
        for (double i = 1; i <= x; i++){
            res += log(i);
        }
        return res;
    }
    else {
        printf("Error: N < 0\n");
    }
}

void Printer(double *a, int n){
    for (int i = 0; i < n; i++){
        printf("%i: %f\n", i, a[i]);
    }
}

int main(){
    double N = 20, t = 15;
    int start = 0, finish = 0;
    int CPU_time = 0, GPU_time = 0;

    //CPU computation
    double g1 = N, g2 = t, g3 = N-t;
    double C = 0;
    start = clock();
    g1 = LogFact(g1);
    g2 = LogFact(g2);
    g3 = LogFact(g3);
    C = g1 - (g2 + g3);
    C = exp(C);
    finish = clock();
    printf("number of combinations from %f to %f: %li\n", N, t, (long)C);
    printf("time of calculations for CPU: %i\n", (finish - start)*1000);

    //GPU computation
    double* f1 = NULL, *f2 = NULL, *f3 = NULL;
    double *h1 = NULL, *h2 = NULL, *h3 = NULL;
    int *m1 = NULL, *m2 = NULL, *m3 = NULL;
    C = 0;
    int n1 = N, n2 = t, n3 = N-t; 
    double log1 = 0, log2 = 0, log3 = 0;

    double *f1_GPU = NULL, *f2_GPU = NULL, *f3_GPU = NULL;
    double *h1_GPU = NULL, *h2_GPU = NULL, *h3_GPU = NULL;
    int *m1_GPU = NULL, *m2_GPU = NULL, *m3_GPU = NULL;

    start = clock();
  
    if(n1 != 0){

        int size1 = n1 * sizeof(double);
        f1 = (double*)malloc(size1);

        for(int i = 0; i < n1; i++){
            f1[i] = (i + 1);
        }

        m1 = (int*)malloc(sizeof(int));
        *m1 = n1;

        h1 = (double*)malloc(size1);

        cudaMalloc((void**)&f1_GPU, size1);
        cudaMalloc((void**)&m1_GPU, sizeof(int));
        cudaMalloc((void**)&h1_GPU, size1);
        cudaMemcpy(f1_GPU, f1, size1, cudaMemcpyHostToDevice);
        cudaMemcpy(m1_GPU, m1, sizeof(int), cudaMemcpyHostToDevice);

        LogArray<<<n1, 1>>>(f1_GPU, h1_GPU, m1_GPU);
        cudaMemcpy(h1, h1_GPU, size1, cudaMemcpyDeviceToHost);
        cudaFree(f1_GPU);
        cudaFree(m1_GPU);
        cudaFree(h1_GPU);
        free(f1);
        free(m1);

        for (int i = 0; i < n1; i++){
            log1 += h1[i];
        }
    }
    else{
        log1 = 0;
    }

    if(n2 != 0){

        int size2 = n2 * sizeof(double);
        f2 = (double*)malloc(size2);

        for(int i = 0; i < n2; i++){
            f2[i] = (i + 1);
        }

        m2 = (int*)malloc(sizeof(int));
        *m2 = n2;

        h2 = (double*)malloc(size2);

        cudaMalloc((void**)&f2_GPU, size2);
        cudaMalloc((void**)&m2_GPU, sizeof(int));
        cudaMalloc((void**)&h2_GPU, size2);
        cudaMemcpy(f2_GPU, f2, size2, cudaMemcpyHostToDevice);
        cudaMemcpy(m2_GPU, m2, sizeof(int), cudaMemcpyHostToDevice);

        LogArray<<<n2, 1>>>(f2_GPU, h2_GPU, m2_GPU);
        cudaMemcpy(h2, h2_GPU, size2, cudaMemcpyDeviceToHost);
        cudaFree(f2_GPU);
        cudaFree(m2_GPU);
        cudaFree(h2_GPU);
        free(f2);
        free(m2);

        for (int i = 0; i < n2; i++){
            log2 += h2[i];
        }
        free(h2);
    }
    else{
        log2 = 0;
    }

    if(n3 != 0){

        int size3 = n3 * sizeof(double);
        f3 = (double*)malloc(size3);

        for(int i = 0; i < n3; i++){
            f3[i] = (i + 1);
        }

        m3 = (int*)malloc(sizeof(int));
        *m3 = n3;

        h3 = (double*)malloc(size3);

        cudaMalloc((void**)&f3_GPU, size3);
        cudaMalloc((void**)&m3_GPU, sizeof(int));
        cudaMalloc((void**)&h3_GPU, size3);
        cudaMemcpy(f3_GPU, f3, size3, cudaMemcpyHostToDevice);
        cudaMemcpy(m3_GPU, m3, sizeof(int), cudaMemcpyHostToDevice);

        LogArray<<<n3, 1>>>(f3_GPU, h3_GPU, m3_GPU);
        cudaMemcpy(h3, h3_GPU, size3, cudaMemcpyDeviceToHost);
        cudaFree(f3_GPU);
        cudaFree(m3_GPU);
        cudaFree(h3_GPU);
        free(f3);
        free(m3);

        for (int i = 0; i < n3; i++){
            log3 += h3[i];
        }

        free(h3);
    }
    else{
        log3 = 0;
    }
    
    C = exp(log1 - (log2 + log3));

    finish = clock();


    printf("number of combinations from %f to %f: %li\n", N, t, (long)C);
    printf("time of calculations for GPU: %i\n", (finish - start)/100);
}
